{"version":3,"sources":["Canvas.js","media/hordus1.jpeg","Image.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","randomizeBigMess","canvas","current","bigMess","tf","toPixels","then","dispose","drawChessBorad","nn","Math","floor","random","unitSize","tileSize","oneUnitResized","tile","newSize","oneUnit","asType","resizeNearestNeighbor","resizeBilinear","chess","oneUnitSqueezed","e","console","log","useEffect","ref","onClick","Img","src","imgRef","imgFile","Image","crossOrigin","hordus1","onload","tensor","fromPixels","className","alt","dim","flippedTensor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGe,SAASA,EAAOC,GAC7B,IAAMC,EAAYC,iBAAO,MAWnBC,EAAmB,WACvB,IAAMC,EAASH,EAAUI,QACnBC,EAAUC,IAAiB,CAAC,IAAK,IAAK,IAC5CA,IAAWC,SAASF,EAASF,GAAQK,MAAK,WACxCH,EAAQI,cAINC,EAAiB,WAIrB,IAHA,IAAMC,EAAKC,KAAKC,MAAsB,EAAhBD,KAAKE,UACvBC,EAAW,EACXC,EAAW,EACR,IAAMD,EAAWC,EAAW,IACjCD,EAAWH,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,IAC5CE,EAAWJ,KAAKC,MAAM,IAAME,GAE9B,IASIE,EATEC,EAAO,CAACF,EAAUA,GAClBG,EAAU,CAACJ,EAAUA,GACrBZ,EAASH,EAAUI,QACnBgB,EAAUd,IACN,CACN,CAAC,CAAC,GAAI,CAAC,IACP,CAAC,CAAC,GAAI,CAAC,MAERe,OAAO,WAGRJ,EADEN,EACeL,IAASgB,sBAAsBF,EAASD,GAAS,GAEjDb,IAASiB,eAAeH,EAASD,GAAS,GAE7D,IACIK,EADEC,EAAkBnB,IAAWW,GAEnC,IACEO,EAAQC,EAAgBP,KAAKA,GAC7B,MAAOQ,GAEP,OADAC,QAAQC,IAAIF,GACL,KAETpB,IAAWC,SAASiB,EAAOrB,GAAQK,MAAK,WACtCY,EAAQX,UACRQ,EAAeR,UACfgB,EAAgBhB,UAChBe,EAAMf,cAQV,OAJAoB,qBAAU,WACRnB,MACC,IAEI,gDAAQoB,IAAK9B,GAAeD,GAA5B,IAAmCgC,QA5DhB,WACdnB,KAAKC,MAAsB,EAAhBD,KAAKE,UAExBZ,IAEAQ,QCXS,UAA0B,qCCI1B,SAASsB,EAAT,GAAuB,IAARC,EAAO,EAAPA,IACtBC,EAASjC,iBAAO,MAEtB4B,qBAAU,WACR,IAAMM,EAAU,IAAIC,MACpBD,EAAQE,YAAc,WACtBF,EAAQF,IAAMK,EACdH,EAAQI,OAAS,WACf,IAAMC,EAASlC,IAAWmC,WAAWN,GACrC7B,IAAWC,SAASiC,EAAQN,EAAO9B,SAASI,MAAK,WAC/CgC,EAAO/B,gBAGV,IAYH,OACE,mCACE,wBACEiC,UAAU,QACVT,IAAKA,EACLH,IAAKI,EACLS,IAAI,SACJZ,QAjBO,WACX,IAAMa,EAAMhC,KAAKC,MAAsB,EAAhBD,KAAKE,UACtB0B,EAASlC,IAAWmC,WAAWP,EAAO9B,SACtCyC,EAAgBvC,IAAWkC,EAAQI,GACzCtC,IAAWC,SAASsC,EAAeX,EAAO9B,SAASI,MAAK,WACtDgC,EAAO/B,UACPoC,EAAcpC,kBCpBL,SAASqC,IACtB,OACE,qCACE,cAAChD,EAAD,IACA,cAACkC,EAAD,OCTN,IAYee,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3fc525f2.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function Canvas(props) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const randomizeResponse = () => {\r\n    const r = Math.floor(Math.random() * 2);\r\n    if (r) {\r\n      randomizeBigMess();\r\n    } else {\r\n      drawChessBorad();\r\n    }\r\n  };\r\n\r\n  const randomizeBigMess = () => {\r\n    const canvas = canvasRef.current;\r\n    const bigMess = tf.randomUniform([400, 400, 3]);\r\n    tf.browser.toPixels(bigMess, canvas).then(() => {\r\n      bigMess.dispose();\r\n    });\r\n  };\r\n\r\n  const drawChessBorad = () => {\r\n    const nn = Math.floor(Math.random() * 2);\r\n    let unitSize = 0;\r\n    let tileSize = 0;\r\n    while (400 - unitSize * tileSize > 10) {\r\n      unitSize = Math.floor(Math.random() * 100 + 20);\r\n      tileSize = Math.floor(400 / unitSize);\r\n    }\r\n    const tile = [tileSize, tileSize];\r\n    const newSize = [unitSize, unitSize];\r\n    const canvas = canvasRef.current;\r\n    const oneUnit = tf\r\n      .tensor([\r\n        [[1], [0]],\r\n        [[0], [1]],\r\n      ])\r\n      .asType(\"float32\");\r\n    let oneUnitResized;\r\n    if (nn) {\r\n      oneUnitResized = tf.image.resizeNearestNeighbor(oneUnit, newSize, true);\r\n    } else {\r\n      oneUnitResized = tf.image.resizeBilinear(oneUnit, newSize, true);\r\n    }\r\n    const oneUnitSqueezed = tf.squeeze(oneUnitResized);\r\n    let chess;\r\n    try {\r\n      chess = oneUnitSqueezed.tile(tile);\r\n    } catch (e) {\r\n      console.log(e);\r\n      return null;\r\n    }\r\n    tf.browser.toPixels(chess, canvas).then(() => {\r\n      oneUnit.dispose();\r\n      oneUnitResized.dispose();\r\n      oneUnitSqueezed.dispose();\r\n      chess.dispose();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawChessBorad();\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} {...props} onClick={randomizeResponse} />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hordus1.a95dd085.jpeg\";","import React, { useRef, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport hordus1 from \"./media/hordus1.jpeg\";\r\n\r\nexport default function Img({ src }) {\r\n  const imgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const imgFile = new Image();\r\n    imgFile.crossOrigin = \"anonymus\";\r\n    imgFile.src = hordus1;\r\n    imgFile.onload = () => {\r\n      const tensor = tf.browser.fromPixels(imgFile);\r\n      tf.browser.toPixels(tensor, imgRef.current).then(() => {\r\n        tensor.dispose();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  const flip = () => {\r\n    const dim = Math.floor(Math.random() * 3);\r\n    const tensor = tf.browser.fromPixels(imgRef.current);\r\n    const flippedTensor = tf.reverse(tensor, dim);\r\n    tf.browser.toPixels(flippedTensor, imgRef.current).then(() => {\r\n      tensor.dispose();\r\n      flippedTensor.dispose();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className=\"image\"\r\n        src={src}\r\n        ref={imgRef}\r\n        alt=\"hordus\"\r\n        onClick={flip}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\nimport Img from \"./Image\";\n\nexport default function App() {\n  return (\n    <>\n      <Canvas />\n      <Img />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}