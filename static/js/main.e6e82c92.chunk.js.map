{"version":3,"sources":["Canvas.js","media/hordus1.jpeg","media/hordus2.jpeg","media/hordus3.jpeg","Image.js","media/ImageNetLabels.txt","LabelsProvider.js","Prediction.js","Rect.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","canvasRef","props","randomizeBigMess","canvas","current","bigMess","tf","toPixels","then","dispose","drawChessBorad","nn","Math","floor","random","unitSize","tileSize","oneUnitResized","tile","newSize","oneUnit","asType","resizeNearestNeighbor","resizeBilinear","chess","oneUnitSqueezed","e","console","log","useEffect","ref","onClick","Img","imgRef","useState","hordus1","src","setSrc","imgFile","Image","crossOrigin","onload","tensor","fromPixels","className","dim","flippedTensor","srcs","hordus2","hordus3","i","alt","LabelsContext","createContext","LabelsProvider","children","labels","setLabels","a","fetch","labelsFile","fetched","text","array","split","wrapReadLabels","Provider","value","Prediction","left","top","width","useContext","indices","setIndices","values","setValues","loading","setLoading","widthCoef","heightCoef","height","fromTFHub","model","sliced","resized","div","readyfied","reshape","result","predict","topResults","dataSync","Array","from","predictions","map","index","prediction","probability","parseFloat","toFixed","href","target","Rect","x","y","startX","startY","anchorX","anchorY","setLeft","setTop","setWidth","followMouse","_left","_setLeft","_top","_setTop","_width","_setWidth","getDist","abs","min","onMouseMove","clientX","clientY","imgRect","getBoundingClientRect","right","bottom","dist","onMouseDown","inBounds","onMouseUp","document","addEventListener","style","App","useRef","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6e82c92.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function Canvas({ canvasRef, props }) {\r\n  const randomizeResponse = () => {\r\n    const r = Math.floor(Math.random() * 2);\r\n    if (r) {\r\n      randomizeBigMess();\r\n    } else {\r\n      drawChessBorad();\r\n    }\r\n  };\r\n\r\n  const randomizeBigMess = () => {\r\n    const canvas = canvasRef.current;\r\n    const bigMess = tf.randomUniform([400, 400, 3]);\r\n    tf.browser.toPixels(bigMess, canvas).then(() => {\r\n      bigMess.dispose();\r\n    });\r\n  };\r\n\r\n  const drawChessBorad = () => {\r\n    const nn = Math.floor(Math.random() * 2);\r\n    let unitSize = 0;\r\n    let tileSize = 0;\r\n    while (400 - unitSize * tileSize > 10) {\r\n      unitSize = Math.floor(Math.random() * 100 + 20);\r\n      tileSize = Math.floor(400 / unitSize);\r\n    }\r\n    const tile = [tileSize, tileSize];\r\n    const newSize = [unitSize, unitSize];\r\n    const canvas = canvasRef.current;\r\n    const oneUnit = tf\r\n      .tensor([\r\n        [[1], [0]],\r\n        [[0], [1]],\r\n      ])\r\n      .asType(\"float32\");\r\n    let oneUnitResized;\r\n    if (nn) {\r\n      oneUnitResized = tf.image.resizeNearestNeighbor(oneUnit, newSize, true);\r\n    } else {\r\n      oneUnitResized = tf.image.resizeBilinear(oneUnit, newSize, true);\r\n    }\r\n    const oneUnitSqueezed = tf.squeeze(oneUnitResized);\r\n    let chess;\r\n    try {\r\n      chess = oneUnitSqueezed.tile(tile);\r\n    } catch (e) {\r\n      console.log(e);\r\n      return null;\r\n    }\r\n    tf.browser.toPixels(chess, canvas).then(() => {\r\n      oneUnit.dispose();\r\n      oneUnitResized.dispose();\r\n      oneUnitSqueezed.dispose();\r\n      chess.dispose();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawChessBorad();\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} {...props} onClick={randomizeResponse} />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hordus1.a95dd085.jpeg\";","export default __webpack_public_path__ + \"static/media/hordus2.7b3ff907.jpeg\";","export default __webpack_public_path__ + \"static/media/hordus3.5629ee33.jpeg\";","import React, { useEffect, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport hordus1 from \"./media/hordus1.jpeg\";\r\nimport hordus2 from \"./media/hordus2.jpeg\";\r\nimport hordus3 from \"./media/hordus3.jpeg\";\r\n\r\nexport default function Img({ imgRef }) {\r\n  const [src, setSrc] = useState(hordus1);\r\n\r\n  useEffect(() => {\r\n    const imgFile = new Image();\r\n    imgFile.crossOrigin = \"anonymus\";\r\n    imgFile.src = src;\r\n    imgFile.onload = () => {\r\n      const tensor = tf.browser.fromPixels(imgFile);\r\n      tf.browser.toPixels(tensor, imgRef.current).then(() => {\r\n        tensor.dispose();\r\n      });\r\n    };\r\n  }, [src]);\r\n\r\n  const flip = () => {\r\n    const dim = Math.floor(Math.random() * 3);\r\n    const tensor = tf.browser.fromPixels(imgRef.current);\r\n    const flippedTensor = tf.reverse(tensor, dim);\r\n    tf.browser.toPixels(flippedTensor, imgRef.current).then(() => {\r\n      tensor.dispose();\r\n      flippedTensor.dispose();\r\n    });\r\n  };\r\n\r\n  const changeImg = () => {\r\n    const srcs = [hordus1, hordus2, hordus3];\r\n    const i = Math.floor(Math.random() * 3);\r\n    console.log(i);\r\n    setSrc(srcs[i]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className=\"flip\" onClick={flip}>\r\n        Flip\r\n      </button>\r\n      <button className=\"changeImg\" onClick={changeImg}>\r\n        Change\r\n      </button>\r\n      <canvas className=\"image\" src={src} ref={imgRef} alt=\"hordus\" />\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/ImageNetLabels.5cbe4572.txt\";","import React, { useContext, createContext, useState } from \"react\";\r\nimport labelsFile from \"./media/ImageNetLabels.txt\";\r\n\r\nconst LabelsContext = createContext();\r\nexport const useLabels = () => useContext(LabelsContext);\r\n\r\nexport default function LabelsProvider({ children }) {\r\n  const [labels, setLabels] = useState(null);\r\n\r\n  async function wrapReadLabels() {\r\n    const fetched = await fetch(labelsFile);\r\n    const text = await fetched.text();\r\n    const array = text.split(/\\r?\\n/)\r\n    setLabels(array);\r\n  }\r\n\r\n  if (!labels) {\r\n    wrapReadLabels();\r\n  }\r\n\r\n  return (\r\n    <LabelsContext.Provider value={{ labels }}>\r\n      {children}\r\n    </LabelsContext.Provider>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { useLabels } from \"./LabelsProvider\";\r\n\r\nconst modelPath =\r\n  \"https://tfhub.dev/google/tfjs-model/imagenet/inception_v3/classification/3/default/1\";\r\nconst NUMBER_OF_RESULTS = 10;\r\nconst IMG_WIDTH = 300;\r\nconst IMG_HEIGHT = 400;\r\n\r\nexport default function Prediction({ imgRef, canvasRef, left, top, width }) {\r\n  const { labels } = useLabels();\r\n  const [indices, setIndices] = useState(null);\r\n  const [values, setValues] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!labels || !top || !left || !width || width === 0) return;\r\n    const widthCoef = Math.floor(imgRef.current.width / IMG_WIDTH);\r\n    const heightCoef = Math.floor(imgRef.current.height / IMG_HEIGHT);\r\n    setLoading(true);\r\n    tf.tidy(() => {\r\n      tf.loadGraphModel(modelPath, { fromTFHub: true }).then((model) => {\r\n        const tensor = tf.browser.fromPixels(imgRef.current);\r\n        const sliced = tf.slice(\r\n          tensor,\r\n          [top * heightCoef, left * widthCoef],\r\n          [width * widthCoef, width * widthCoef]\r\n        );\r\n        const resized = tf.image\r\n          .resizeBilinear(sliced, [299, 299], true)\r\n          .div(255);\r\n        tf.browser.toPixels(resized, canvasRef.current);\r\n        const readyfied = resized.reshape([1, 299, 299, 3]);\r\n        const result = model.predict(readyfied);\r\n        const topResults = tf.topk(result, NUMBER_OF_RESULTS);\r\n        const indices = topResults.indices.dataSync();\r\n        const values = topResults.values.dataSync();\r\n        setLoading(false);\r\n        setIndices(Array.from(indices));\r\n        setValues(Array.from(values));\r\n      });\r\n    });\r\n  }, [labels, imgRef, width]);\r\n\r\n  if (loading) return <h2>Loading ...</h2>;\r\n  if (!indices || !values) return null;\r\n\r\n  const predictions = indices.map((index, i) => {\r\n    const prediction = labels[index];\r\n    const probability = parseFloat(values[i]).toFixed(2) + \"%\";\r\n    const href = \"https://www.google.com/search?tbm=isch&q=\" + prediction;\r\n    return (\r\n      <tr key={i}>\r\n        <td>\r\n          <a href={href} target=\"_blank\">{prediction}</a>\r\n        </td>\r\n        <td>{probability}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table className=\"results\">\r\n      <thead>\r\n        <tr>\r\n          <th>Prediction</th>\r\n          <th>Probability</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{predictions}</tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Rect({ imgRef, setLeft, setTop, setWidth }) {\r\n  let x, y, startX, startY, endX, endY, anchorX, anchorY;\r\n  let followMouse = false;\r\n\r\n  const [_left, _setLeft] = useState(0);\r\n  const [_top, _setTop] = useState(0);\r\n  const [_width, _setWidth] = useState(0);\r\n\r\n  const inBounds = () => {\r\n    const imgRect = imgRef.current.getBoundingClientRect();\r\n    if (\r\n      x < imgRect.left ||\r\n      x > imgRect.right ||\r\n      y < imgRect.top ||\r\n      y > imgRect.bottom\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const getDist = () => {\r\n    const width = Math.abs(x - anchorX);\r\n    const height = Math.abs(y - anchorY);\r\n    const dist = Math.min(width, height);\r\n    return dist;\r\n  };\r\n\r\n  const onMouseMove = (e) => {\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n\r\n    if (!followMouse) return;\r\n    const imgRect = imgRef.current.getBoundingClientRect();\r\n    if (!imgRef) return;\r\n\r\n    if (x > imgRect.right) {\r\n      x = imgRect.right;\r\n    }\r\n    if (x < imgRect.left) {\r\n      x = imgRect.left;\r\n    }\r\n    if (y > imgRect.bottom) {\r\n      y = imgRect.bottom;\r\n    }\r\n    if (y < imgRect.top) {\r\n      y = imgRect.top;\r\n    }\r\n\r\n    const dist = getDist();\r\n\r\n    if (followMouse) {\r\n      if (x >= anchorX) {\r\n        startX = anchorX;\r\n        endX = anchorX + dist;\r\n      }\r\n      if (y >= anchorY) {\r\n        startY = anchorY;\r\n        endY = anchorY + dist;\r\n      }\r\n      if (x < anchorX) {\r\n        startX = anchorX - dist;\r\n        endX = anchorX;\r\n      }\r\n      if (y < anchorY) {\r\n        startY = anchorY - dist;\r\n        endX = anchorY;\r\n      }\r\n\r\n      _setLeft(startX);\r\n      _setTop(startY);\r\n      _setWidth(dist);\r\n    }\r\n  };\r\n\r\n  const onMouseDown = () => {\r\n    if (!inBounds()) return;\r\n    anchorX = x;\r\n    anchorY = y;\r\n    followMouse = true;\r\n  };\r\n\r\n  const onMouseUp = () => {\r\n    if (!followMouse) return;\r\n    followMouse = false;\r\n    const imgRect = imgRef.current.getBoundingClientRect();\r\n    const dist = getDist();\r\n    setLeft(Math.floor(startX - imgRect.left));\r\n    setTop(Math.floor(startY - imgRect.top));\r\n    setWidth(Math.floor(dist));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", onMouseDown);\r\n    document.addEventListener(\"touchstart\", onMouseDown);\r\n    document.addEventListener(\"mouseup\", onMouseUp);\r\n    document.addEventListener(\"touchend\", onMouseUp);\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n    document.addEventListener(\"touchmove\", onMouseMove);\r\n  }, [imgRef]);\r\n\r\n  return (\r\n    <div\r\n      className=\"rect\"\r\n      style={{\r\n        top: _top,\r\n        left: _left,\r\n        width: _width,\r\n        height: _width,\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\nimport Img from \"./Image\";\nimport Prediction from \"./Prediction\";\nimport Rect from \"./Rect\";\n\nexport default function App() {\n  const imgRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [width, setWidth] = useState(0);\n\n  return (\n    <>\n      <Img imgRef={imgRef} />\n      <Canvas canvasRef={canvasRef} />\n      <Prediction\n        imgRef={imgRef}\n        canvasRef={canvasRef}\n        left={left}\n        top={top}\n        width={width}\n      />\n      <Rect\n        imgRef={imgRef}\n        setLeft={setLeft}\n        setTop={setTop}\n        setWidth={setWidth}\n        top={top}\n        left={left}\n        width={width}\n      />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport LabelsProvider from \"./LabelsProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LabelsProvider>\n      <App />\n    </LabelsProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}