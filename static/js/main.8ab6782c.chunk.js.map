{"version":3,"sources":["Canvas.js","Image.js","media/hordus1.jpeg","media/hordus2.jpeg","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","useEffect","canvas","current","blackSquare","tf","whiteSquare","twoSquaresFirst","twoSquaresSecond","fourSquares","chess","tile","toPixels","then","dispose","drawChessBorad","ref","onClick","bigMess","Img","src","imgRef","useState","message","setMessage","imgTensor","fromPixels","shape","className","alt","App","imgFile","Image","crossOrigin","hordus2","onload","tensor","console","log","tensorFromFile","hordus1","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGe,SAASA,EAAOC,GAC7B,IAAMC,EAAYC,iBAAO,MAgCzB,OAJAC,qBAAU,YAlBa,WACrB,IAAMC,EAASH,EAAUI,QACnBC,EAAcC,IAAQ,CAAC,GAAI,IAAK,GAChCC,EAAcD,IAAQ,CAAC,GAAI,IAAK,GAChCE,EAAkBF,IAAU,CAACD,EAAaE,IAAe,GACzDE,EAAmBH,IAAU,CAACC,EAAaF,IAAe,GAC1DK,EAAcJ,IAAU,CAACE,EAAiBC,IAC1CE,EAAQD,EAAYE,KAAK,CAAC,GAAI,KACpCN,IAAWO,SAASF,EAAOR,GAAQW,MAAK,WACtCT,EAAYU,UACZR,EAAYQ,UACZP,EAAgBO,UAChBN,EAAiBM,UACjBL,EAAYK,UACZJ,EAAMI,aAKRC,KACC,IAEI,gDAAQC,IAAKjB,GAAeD,GAA5B,IAAmCmB,QA9BjB,WACvB,IAAMf,EAASH,EAAUI,QACnBe,EAAUb,IAAiB,CAAC,IAAK,IAAK,IAC5CA,IAAWO,SAASM,EAAShB,GAAQW,MAAK,WACxCK,EAAQJ,iB,WCPC,SAASK,EAAT,GAAuB,IAARC,EAAO,EAAPA,IACtBC,EAASrB,iBAAO,MACtB,EAA8BsB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAvB,qBAAU,WACR,IAAMwB,EAAYpB,IAAWqB,WAAWL,EAAOlB,SAC/CqB,EAAW,uCAAD,OAAwCC,EAAUE,MAAlD,YACVF,EAAUX,aAIV,qCACE,qBAAKc,UAAU,QAAQR,IAAKA,EAAKJ,IAAKK,EAAQQ,IAAI,WAClD,4BAAIN,OChBK,UAA0B,qCCA1B,MAA0B,qCCQ1B,SAASO,IAgBtB,OAfuB,WACrB,IAAMC,EAAU,IAAIC,MACpBD,EAAQE,YAAc,WACtBF,EAAQX,IAAMc,EACdH,EAAQI,OAAS,WACf,IAAMC,EAAS/B,IAAWqB,WAAWK,GACrCM,QAAQC,IAAR,kDAC6CF,EAAOT,MADpD,YAGAS,EAAOtB,WAIXyB,GAGE,qCACE,cAAC1C,EAAD,IACA,cAACsB,EAAD,CAAKC,IAAKoB,OC3BhB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8ab6782c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function Canvas(props) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const randomizeBigMess = () => {\r\n    const canvas = canvasRef.current;\r\n    const bigMess = tf.randomUniform([400, 400, 3]);\r\n    tf.browser.toPixels(bigMess, canvas).then(() => {\r\n      bigMess.dispose();\r\n    });\r\n  };\r\n\r\n  const drawChessBorad = () => {\r\n    const canvas = canvasRef.current;\r\n    const blackSquare = tf.fill([20, 20], 1);\r\n    const whiteSquare = tf.fill([20, 20], 0);\r\n    const twoSquaresFirst = tf.concat([blackSquare, whiteSquare], -1);\r\n    const twoSquaresSecond = tf.concat([whiteSquare, blackSquare], -1);\r\n    const fourSquares = tf.concat([twoSquaresFirst, twoSquaresSecond]);\r\n    const chess = fourSquares.tile([10, 10]);\r\n    tf.browser.toPixels(chess, canvas).then(() => {\r\n      blackSquare.dispose();\r\n      whiteSquare.dispose();\r\n      twoSquaresFirst.dispose();\r\n      twoSquaresSecond.dispose();\r\n      fourSquares.dispose();\r\n      chess.dispose();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawChessBorad();\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} {...props} onClick={randomizeBigMess} />;\r\n}\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function Img({ src }) {\r\n  const imgRef = useRef(null);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const imgTensor = tf.browser.fromPixels(imgRef.current);\r\n    setMessage(`Successful conversion from DOM to a ${imgTensor.shape} tensor`);\r\n    imgTensor.dispose();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <img className=\"image\" src={src} ref={imgRef} alt=\"hordus\" />\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/hordus1.a95dd085.jpeg\";","export default __webpack_public_path__ + \"static/media/hordus2.7b3ff907.jpeg\";","import React from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\nimport Img from \"./Image\";\nimport hordus1 from \"./media/hordus1.jpeg\";\nimport hordus2 from \"./media/hordus2.jpeg\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nexport default function App() {\n  const tensorFromFile = () => {\n    const imgFile = new Image();\n    imgFile.crossOrigin = \"anonymus\";\n    imgFile.src = hordus2;\n    imgFile.onload = () => {\n      const tensor = tf.browser.fromPixels(imgFile);\n      console.log(\n        `Successful conversion from Image() to a ${tensor.shape} tensor`\n      );\n      tensor.dispose();\n    };\n  };\n\n  tensorFromFile();\n\n  return (\n    <>\n      <Canvas />\n      <Img src={hordus1} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}