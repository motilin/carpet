{"version":3,"sources":["Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","useEffect","canvas","current","blackSquare","tf","whiteSquare","twoSquaresFirst","twoSquaresSecond","fourSquares","chess","tile","toPixels","then","dispose","drawChessBorad","ref","onClick","bigMess","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VAGe,SAASA,EAAOC,GAC7B,IAAMC,EAAYC,iBAAO,MAgCzB,OAJAC,qBAAU,YAlBa,WACrB,IAAMC,EAASH,EAAUI,QACnBC,EAAcC,IAAQ,CAAC,GAAI,IAAK,GAChCC,EAAcD,IAAQ,CAAC,GAAI,IAAK,GAChCE,EAAkBF,IAAU,CAACD,EAAaE,IAAe,GACzDE,EAAmBH,IAAU,CAACC,EAAaF,IAAe,GAC1DK,EAAcJ,IAAU,CAACE,EAAiBC,IAC1CE,EAAQD,EAAYE,KAAK,CAAC,GAAI,KACpCN,IAAWO,SAASF,EAAOR,GAAQW,MAAK,WACtCT,EAAYU,UACZR,EAAYQ,UACZP,EAAgBO,UAChBN,EAAiBM,UACjBL,EAAYK,UACZJ,EAAMI,aAKRC,KACC,IAEI,gDAAQC,IAAKjB,GAAeD,GAA5B,IAAmCmB,QA9BjB,WACvB,IAAMf,EAASH,EAAUI,QACnBe,EAAUb,IAAiB,CAAC,IAAK,IAAK,IAC5CA,IAAWO,SAASM,EAAShB,GAAQW,MAAK,WACxCK,EAAQJ,iBCNC,SAASK,IAEtB,OAAO,cAACtB,EAAD,ICNT,IAYeuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.36608f67.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport default function Canvas(props) {\r\n  const canvasRef = useRef(null);\r\n\r\n  const randomizeBigMess = () => {\r\n    const canvas = canvasRef.current;\r\n    const bigMess = tf.randomUniform([400, 400, 3]);\r\n    tf.browser.toPixels(bigMess, canvas).then(() => {\r\n      bigMess.dispose();\r\n    });\r\n  };\r\n\r\n  const drawChessBorad = () => {\r\n    const canvas = canvasRef.current;\r\n    const blackSquare = tf.fill([20, 20], 1);\r\n    const whiteSquare = tf.fill([20, 20], 0);\r\n    const twoSquaresFirst = tf.concat([blackSquare, whiteSquare], -1);\r\n    const twoSquaresSecond = tf.concat([whiteSquare, blackSquare], -1);\r\n    const fourSquares = tf.concat([twoSquaresFirst, twoSquaresSecond]);\r\n    const chess = fourSquares.tile([10, 10]);\r\n    tf.browser.toPixels(chess, canvas).then(() => {\r\n      blackSquare.dispose();\r\n      whiteSquare.dispose();\r\n      twoSquaresFirst.dispose();\r\n      twoSquaresSecond.dispose();\r\n      fourSquares.dispose();\r\n      chess.dispose();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawChessBorad();\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} {...props} onClick={randomizeBigMess} />;\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nexport default function App() {\n\n  return <Canvas />;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}